//orden 1
#include <iostream>
#include <string>
#define VEC 55

using namespace std;
int facto(int n);
void pares();
void strinve(string p,string vector[]);


int main()
{
	int opt, par, factorial;
	string palabra, vector[VEC];
	do
	{
		cout << "   MENU  " << endl;
		cout << "1.- Calcular factorial de un numero con recursividad" << endl;
		cout << " 2.- Mostrar una serie de los numeros ares empezando de 4" << endl;
		cout << "3.- Mover los elementos de un string a un vector" << endl;
		cout << "0.- Para salir del programa" << endl;
		cout << "Ingrese la opcion que desea" << endl;
		cin >> opt;
		switch (opt)
		{
		case 1: do {
			cout << "Ingrese el numero para calcular factorial" << endl;
			cin >> factorial;
		} while (factorial < 0);
		cout << "El factorial es:" << facto(factorial) << endl;
		break;
		case 2: pares();
			break;
		case 3:cout << "Ingrese el string" << endl;
			cin >> palabra;
			strinve(palabra, vector);
			break;
		case 0: cout << "Salir" << endl;
		default: cout << "No hay opciÃ³n" << endl;
			break;

		}
		system("pause");
		system("cls");
	} while (opt != 0);
}
int facto(int n)
{
	if (n == 0)
	{
		return 1;
	}
	else
	{
		return n * facto(n - 1);
	}
}
void pares()
{
	int p;
	cout << "Ingrese el limite de la serie" << endl;
	cin >> p;
	for (int i = 4; i <= p; i += 2)
	{
		cout << i<<" , ";
	}
	cout << endl;
}
void strinve(string p, string vector[])
{
	int n = p.length();
	for (int i = 0; i < n; i++)
	{
		vector[i] = p[i];
	}
}

//orden2
#include <iostream>
#include "conio.h"

#define FIL 10
#define COL 10

using namespace std;

void MatrizTrasp(double matriz1[FIL][COL], double matriz2[FIL][COL]);
void mostrarMatriz(double matriz1[FIL][COL], int filas, int columnas);
void cargarMatriz(double matriz1[FIL][COL], int filas, int columnas);

int filas1, columnas1;

int main(){
	
	double matriz1[FIL][COL], matriz2[FIL][COL];
	
	cout << "filas: "; cin >> filas1;
	cout << "columnas: "; cin >> columnas1;

	cargarMatriz(matriz1, filas1, columnas1);
	MatrizTrasp(matriz1, matriz2);
	mostrarMatriz(matriz2, filas1, columnas1);

	return 0;
}

void MatrizTrasp(double matriz1[FIL][COL], double matriz2[FIL][COL]) {

	for(int i=0; i<filas1; i++)
		for (int j = 0; j < columnas1; j++) {

			matriz2[i][j] = matriz1[j][i];
		}

}

void mostrarMatriz(double matriz1[FIL][COL], int filas, int columnas) {

	for (int i = 0; i < filas; i++) {
		for (int j = 0; j < columnas; j++) {

			cout << "" << matriz1[i][j] << " ";
		}
		cout << " " << endl;
	}
}

void cargarMatriz(double matriz1[FIL][COL], int filas, int columnas) {
	

	for (int i = 0; i < filas; i++) {
		for (int j = 0; j < columnas; j++) {

			cout << "[" << i << "][" << j << "]: ";
			cin >> matriz1[i][j];
		}
	}

}

//orden 3
#include <iostream>

using namespace std;
#define fil 20
#define col 20

int fila, columna;

void mostrarMatriz(double mat[fil][col]);
void cargarMatriz(double mat[fil][col]);
void transpuesta(double mat[fil][col], double mat2[fil][col]);

int main()
{
    double mat[fil][col]; double mat2[fil][col];
    cout << " Ingrese la cantidad de filas de la matriz" << endl;
    cin >> fila;
    cout << "Ingrese la cantidad de columnas de la matriz" << endl;
    cin >> columna;
    cargarMatriz(mat);
    transpuesta(mat, mat2);
    mostrarMatriz(mat);
    mostrarMatriz(mat2);

    return 0;
}

void cargarMatriz(double mat[fil][col])
{
    for (int i = 0; i < fila; i++)
    {
        for (int j = 0; j < columna; j++)
        {
            cout << "Mat[" << i << "] [" << j << "]";
            cin >> mat[i][j];
        }
    }
}

void transpuesta(double mat[fil][col], double mat2[fil][col])
{
    for (int i = 0; i < fila; i++)
    {
        for (int j = 0; j < columna; j++)
        {
            mat2[j][i] = mat[i][j];
        }
    }
}

void mostrarMatriz(double mat[fil][col])
{
    for (int i = 0; i < fila; i++)
    {
        for (int j = 0; j < columna; j++)
        {
            cout << mat[i][j];
        }
        cout << endl;
    }
}
